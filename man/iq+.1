.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "IQ+" "1" "" "Version 2.0" "IQ+ Extended Calculator Documentation"
.hy
.SH NAME
.PP
\f[B]iq+\f[R] \[em] Extended version of the \f[B]IQ\f[R] Precision
Decimal Calculator
.SH SYNOPSIS
.PP
\f[B]iq+\f[R] func_name [-s?] number1 [operator] number2
.PP
\f[B]iq+\f[R] [\f[B]-h\f[R]|\f[B]\[en]help\f[R]]
.PP
\f[B]iq+\f[R] func_name [\f[B]-h\f[R]]
.SH DESCRIPTION
.PP
\f[B]IQ+\f[R] Extends the basic math functions provided by the
\f[B]IQ\f[R] calculator.
.PP
It includes functions for computing logarithms in base 2, 3, 4, n/e or
10, roots, powers and exp().
.PP
\f[B]IQ+\f[R] auto-loads the \f[I]iq_trig\f[R] Trigonometry Module and
the \f[I]iq_misc\f[R] Module which contains advanced Multiplication and
division tools.
.PP
See the \f[I]iq_trig\f[R] and \f[I]iq_misc\f[R] man-pages for the
details of those functions.
.SS OPTIONS
.PP
-h, \[en]help
.IP
.nf
\f[C]
Prints general usage information
\f[R]
.fi
.PP
list
.IP
.nf
\f[C]
Prints a list of avialable functions
\f[R]
.fi
.SS STRUCTURE
.PP
\f[I]iq+\f[R] relies on the basic math functions from \f[I]iq\f[R], so
\f[I]iq\f[R] must also be available in the same location as
\f[I]iq+\f[R].
When run from the CLI, \f[B]iq+\f[R] automatically `sources', or
includes the basic math functions from \f[B]iq\f[R], so they are also
available from \f[B]iq+\f[R].
.SS SYNTAX
.PP
None of the functions in \f[B]iq+\f[R] require an Operator, but the
Carat `\[ha]' can be used with `pow', `ipow' and epow\[cq].
.SS SCALE
.PP
Unlike the Basic Math functions of \f[I]add\f[R], \f[I]mul\f[R] and
\f[I]div\f[R], the functions in \f[B]IQ+\f[R] do not support arbitrary
precision.
Instead, they are all `tuned' to deliver fast, accurate results within a
useful range -usually at least 12 places.
The default scale is 6 decimal places.
.SH FUNCTIONS
.PP
\f[B]logx\f[R] \[em]- Calculates Logarithms in base 10, 2, 3, 4 or
`e'(natural)
.IP
.nf
\f[C]
Usage: \[aq]logx [-s?] base num1\[aq]
Example: \[aq]logx -s8 10 6.7\[aq] for base10: log(6.7) or log(10,6.7)
Example: \[aq]logx -s7 n 6.7\[aq] for base\[aq]e\[aq]: ln(6.7) (natural log)
Example: \[aq]logx -s7 2 6.7\[aq] for base2: log2(6.7) or log(2,6.7)
Example: \[aq]logx -s20 10 3.141592\[aq] = 0.49714978234172300499

Recommended scale: 4-12
Accurate to at least 20 decimal places.
Execution times increase when scale >13
\f[R]
.fi
.PP
\f[B]nroot\f[R] \[em]- Calculates the nth-root of a number
.IP
.nf
\f[C]
Usage: \[aq]nroot [-s?] Number Nth\[aq]
Example: \[aq]nroot -s6 4.3 10\[aq] for: 10th root of 4.3
Example: \[aq]nroot -s8 43.225 2\[aq] for: sqrt of 43.225
Example: \[aq]nroot -s11 2 2\[aq] = 1.41421356237

\[aq]Number\[aq] must be positive, integer or decimal.
\[aq]Nth\[aq] must be a positive integer.

Recommended scale: 4-12
Execution times increase when scale >7
\f[R]
.fi
.PP
\f[B]exp\f[R] \[em]- Raises Euler\[cq]s number `e' to a given power
(e\[ha]x)
.IP
.nf
\f[C]
Usage: \[aq]exp [-s?] exponent\[aq]
Example: \[aq]exp -s12 3.6\[aq] = 36.598234443678
Example: \[aq]exp -s8 1.134\[aq] = 3.10806392

Recommended scale: 4-12
Accurate to \[ti]12 places where X <19
\f[R]
.fi
.PP
\f[B]pow\f[R] \[em]- Raises an integer or decimal number to a given
power
.IP
.nf
\f[C]
Usage: \[aq]pow [-s?] base [\[ha]] exponent\[aq]

Raises a number (base) to a power (exponent).
For integer exponents, \[aq]base\[aq] and scale are unlimited.
Example: \[aq]pow -s9 3.141592 \[ha] 6\[aq] = 961.387993507
Example: \[aq]pow -s12 12.141592 \[ha] -6\[aq] = 0.000000312137

Fractional exponents are supported, within certain
ranges, shown roughly below:
59999.99999 \[ha] 0.999                     0.99999 \[ha] 1000009.999
239.99999 \[ha] 1.999                       1.09999 \[ha] 109.999
35.99999 \[ha] 2.999    5.99999 \[ha] 5.999     1.24999 \[ha] 45.999
14.99999 \[ha] 3.999                        1.49999 \[ha] 26.999
8.99999 \[ha] 4.999                         1.99999 \[ha] 14.999

As seen above, when either \[aq]base\[aq] or \[aq]exponent\[aq] are <1,
the allowed range of the other becomes relatively large.
Above ranges support scales of 6-12, with a slightly wider
range supporting a reduced scale of 3 less than requested.
Example: \[aq]pow -s8 7.999999 6.999999\[aq]  =  2097145.80409

Recommended scale: 4-12
Execution times increases dramatically when scale is >8
Use of the Operator \[aq]\[ha]\[aq] is optional.
\f[R]
.fi
.PP
\f[B]ipow and epow\f[R] \[em]- Both serve as back-end functions to
\f[I]pow\f[R] but can also be used separately.
.IP
.nf
\f[C]
Both functions work only with a positive \[aq]base\[aq] and integer
\[aq]exponent\[aq]. *epow* is particularly useful with very large 
or small numbers, since it can return answers in E-Notation. 
\f[R]
.fi
.PP
\f[B]ipow\f[R] \[em]- Raise a positive `base' to an integer power
.IP
.nf
\f[C]
Usage: \[aq]ipow [-s?] base [\[ha]] exponent\[aq]

\[aq]base\[aq] must be a positive number, integer or decimal.
Exponents can be negative or positive, but must be integers.
Example: \[aq]ipow -s20 3.14 \[ha] -4\[aq] = 0.01028682632761480208
Example: \[aq]ipow -s9  9.35234 16\[aq] = 3425504893420641.05730195
Use of the Operator \[aq]\[ha]\[aq] is optional.
\f[R]
.fi
.PP
\f[B]epow\f[R] \[em]- Raise a positive `base' to an integer power
.IP
.nf
\f[C]
Usage: \[aq]epow [-s?,-S,-e?] base [\[ha]] exponent\[aq] 

Both \[aq]base\[aq] and \[aq]exponent\[aq] must be positive numbers.
\[aq]base\[aq] can be an integer or decimal, \[aq]exponent\[aq] must be integer.
\[aq]epow\[aq] returns powers with answers in three forms: normally
scaled outputs, significant digits or scientific e-notation.
Output format is controlled with 3 scaling options: -s? -S? or -e?

Example usage for normal scaling: \[aq]epow -s9 0.14 7\[aq] = 0.000001054
Example for significant digits: \[aq]epow -S9 0.14 7\[aq] = 0.00000105413504
Example for e-notation: \[aq]epow -e9 0.14 7\[aq] = 1.05413504e-6
Example for e-notation: \[aq]epow -e12 42.818 7\[aq] = 2.638667359224e11
\[ti]2-Billion-digit Example: epow -e6 0.0105 \[ha] 1000000000 = 1.174730e-1978810701

\[aq]epow\[aq] does not accept inputs in E-Notation.
\f[R]
.fi
.SH UTILITY FUNCTIONS
.PP
\f[B]getConst\f[R] \[em]- Returns a scaled-value of a Constant
.IP
.nf
\f[C]
Usage: getConst (constant-name) [scale]

getConst - returns a truncated or standard-length value of these constant:
\[aq]e\[aq], \[aq]pi\[aq], \[aq]ln(10)\[aq], \[aq]pi/2\[aq], \[aq]pi/4\[aq] or \[aq]phi\[aq]

Example: \[aq]getConst e 24\[aq] returns \[aq]e\[aq] truncated to 24 places
Example: \[aq]getConst e\[aq] alone returns \[aq]e\[aq] to 11 places

Maximum precision of Constants is 30.
\f[R]
.fi
.SH AUTHOR
.PP
Gilbert Ashley <https://github.com/ShellCanToo/iQalc>
.SH SEE ALSO
.PP
\f[B]iq(1)\f[R] \f[B]iq_trig(1)\f[R] \f[B]iq_misc(1)\f[R]
